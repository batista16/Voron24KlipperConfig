
[gcode_macro PRINT_START_TEST]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60) %}
    {% set EXTRA_BED_TEMP = params.EXTRA_BED_TEMP|default(5) %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190) %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(30) %}
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    {% set INITIAL_EXTRUDER = params.INITIAL_EXTRUDER|default(0) %}

    M117 Testing
    M118 Testing
    SEARCH_VARS s="object"
    #{% ECHO printer.exclude_objects.objects %}

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 
                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

#####################################################################
# 	Macros

# The following status macros are available:
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
# With additional macros for direct control:
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#####################################################################
# SET_LED_TEMPLATE LED=<led_name> [INDEX=<index>] TEMPLATE=temperature_color [param_sensor="'heater_bed'"] [param_cool_temp=20] [param_hot_temp=100] [param_brightness=1.0]
# 
# To stop monitoring a temperature, and resume normal LED control
# SET_LED_TEMPLATE LED=<led_name> [INDEX=<index>]


[gcode_macro PreHeat]
gcode: 
    SET_FAN_SPEED FAN=BedFans SPEED=1

    SET_LED_TEMPLATE LED=sb_leds TEMPLATE=""
    STOP_LED_EFFECTS

    SET_LED_TEMPLATE LED=sb_leds TEMPLATE=temperature_color param_sensor="'heater_bed'" param_cool_temp=25 param_hot_temp=115

    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=115
    M106 S255
    G28
    G90
    G0 X175 Y175 Z50 F6000



[gcode_macro FullBeams]
gcode:
    SET_PIN PIN=caselight VALUE=1.00
    SET_PIN PIN=bedlight VALUE=1.00
    SET_NOZZLE_LEDS_ON

[gcode_macro ToggleLights]
gcode:
    {% if printer["output_pin caselight"].value == 1 %}
        SET_PIN PIN=caselight VALUE=0
        SET_PIN PIN=bedlight VALUE=0
        M117 Lights Off
        M118 Lights Off
    {% else %}
        {% if printer["output_pin caselight"].value == 0 %}
            SET_PIN PIN=caselight VALUE=0.2
            M117 Lights On
            M118 Lights On
        {% else %}
            SET_PIN PIN=caselight VALUE=1
            SET_PIN PIN=bedlight VALUE=1
            M117 Full Beams
            M118 Full Beams
        {% endif %}
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    STATUS_HOMING
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    G28
    BED_MESH_PROFILE LOAD=default
    G0 X175 Y175 Z30 F18000
    STATUS_READY
   
# The following status macros are available:
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
# With additional macros for direct control:
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF

[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60) %}
    {% set EXTRA_BED_TEMP = params.EXTRA_BED_TEMP|default(5) %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190) %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(30) %}
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    {% set INITIAL_EXTRUDER = params.INITIAL_EXTRUDER|default(0) %}

    SET_LED_TEMPLATE LED=sb_leds TEMPLATE=""
    STOP_LED_EFFECTS
    STATUS_BUSY
    BED_MESH_CLEAR
    ;Lower acceleration
    SET_VELOCITY_LIMIT ACCEL=1000 ACCEL_TO_DECEL=500
    SET_PIN PIN=caselight VALUE=1
    STATUS_HEATING
    M140 S{BED_TEMP|int + EXTRA_BED_TEMP|int}
    M117 Heating Bed
    M118 Heating Bed    
    {%  if printer.heater_bed.target > 95 %}
      SET_FAN_SPEED FAN=BedFans SPEED=1 ;turn on BedFans
    {% endif %}

    M117 Positioning Printhead
    M118 Positioning Printhead
    STATUS_HOMING
    G90
    G28
    STATUS_HEATING
    G0 X175 Y175 Z40 F6000
    M117 Heating Extruder
    M118 Heating Extruder
    M104 S150
    SET_LED_TEMPLATE LED=sb_leds INDEX=1 TEMPLATE=temperature_color param_sensor="'extruder'" param_cool_temp=25 param_hot_temp=150
    SET_LED_TEMPLATE LED=sb_leds INDEX=2 TEMPLATE=temperature_color param_sensor="'heater_bed'" param_cool_temp=25 param_hot_temp={BED_TEMP|int + EXTRA_BED_TEMP|int}
    SET_LED_TEMPLATE LED=sb_leds INDEX=3 TEMPLATE=temperature_color param_sensor="'heater_bed'" param_cool_temp=25 param_hot_temp={BED_TEMP|int + EXTRA_BED_TEMP|int}

    BACKUP_CFG
    
    M117 Waiting for Bed temperature
    M118 Waiting for Bed temperature
    M190 S{BED_TEMP|int + EXTRA_BED_TEMP|int}

    {%  if printer.heater_bed.target > 95 %}
      M106 S255
      SET_LED_TEMPLATE LED=sb_leds TEMPLATE=temperature_color param_sensor="'CT_MidPost'" param_cool_temp=25 param_hot_temp={CHAMBER_TEMP}
      M117 Waiting for Enclosure temperature
      M118 Waiting for Enclosure temperature
      TEMPERATURE_WAIT SENSOR="temperature_sensor CT_MidPost" MINIMUM={CHAMBER_TEMP}
      M106 S0
    {% endif %}

    SET_LED_TEMPLATE LED=sb_leds INDEX=2 TEMPLATE=temperature_color param_sensor="'heater_bed'" param_cool_temp=25 param_hot_temp={BED_TEMP}
    SET_LED_TEMPLATE LED=sb_leds INDEX=3 TEMPLATE=temperature_color param_sensor="'heater_bed'" param_cool_temp=25 param_hot_temp={BED_TEMP}
    M117 Waiting for Bed temperature
    M118 Waiting for Bed temperature
    M190 S{BED_TEMP}

    {%  if printer.quad_gantry_level.applied == False %}
      M117 Gantry Leveling
      M118 Gantry Leveling
      STATUS_LEVELING
      QUAD_GANTRY_LEVEL
    {% endif %}

    SET_LED_TEMPLATE LED=sb_leds TEMPLATE=""
    STATUS_MESHING
    BED_MESH_CALIBRATE ADAPTIVE=1
    STATUS_CLEANING
    G28 Z
    ;CLEAN_NOZZLE
    G90
    G28 Z

    M104 S{EXTRUDER_TEMP}
    M117 Heating Extruder
    M118 Heating Extruder
    M109 S{EXTRUDER_TEMP}

    {%  if printer.heater_bed.target > 95 %}
      SET_FAN_SPEED FAN=BedFans SPEED=1 ;BedFans to printing speed
    {% endif %}
    G0 Z20 F12000

    M83 ; use relative distances for extrusion
    G92 E0 ; Reset Extruder
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    M117 Printing

    STATUS_CLEANING
    ;CLEAN_NOZZLE

    LINE_PURGE

    SET_LED_TEMPLATE LED=sb_leds TEMPLATE=""
    STATUS_PRINTING
    UPDATE_DELAYED_GCODE ID=PrintingLights DURATION=120 ;2mins




[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set unload = params.UNLOAD|default(1) %}
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 F20000                 ; move nozzle to remove stringing
    G90                            ; absolute positioning
    G0  X320 Y3 F18000             ; park nozzle at front (so the gantry is in a better balance while resting)
    M220 S100
    M221 S100

    SET_LED_TEMPLATE LED=sb_leds INDEX=1 TEMPLATE=temperature_color param_sensor="'extruder'" param_cool_temp=25 param_hot_temp=220
    SET_LED_TEMPLATE LED=sb_leds INDEX=2 TEMPLATE=temperature_color param_sensor="'heater_bed'" param_cool_temp=25 param_hot_temp={printer.heater_bed.target}
    SET_LED_TEMPLATE LED=sb_leds INDEX=3 TEMPLATE=temperature_color param_sensor="'heater_bed'" param_cool_temp=25 param_hot_temp={printer.heater_bed.target}
    {%  if printer.heater_bed.target > 95 %}
      SET_LED_TEMPLATE LED=sb_leds INDEX=1 TEMPLATE=temperature_color param_sensor="'extruder'" param_cool_temp=25 param_hot_temp=250
    {% endif %}

    TURN_OFF_HEATERS
    M107                           ; turn off fan
    BED_MESH_CLEAR
    flash
    {%  if printer.heater_bed.target > 95 %}
      UPDATE_DELAYED_GCODE ID=StopCleaningAir DURATION=300 ;5mins
    {% endif %}
    M117 Done Printing
    M118 Done Printing
    
    UPDATE_DELAYED_GCODE ID=GoSleep DURATION=900 ;15mins


[delayed_gcode StopCleaningAir]
gcode:
    SET_FAN_SPEED FAN=BedFans SPEED=0 ;turn off BedFans
    M117 Done Cleaning air
    M118 Done Cleaning air
    ;SET_FAN_SPEED FAN=Exhaust SPEED=1 ;turn on exhaust
    ;M117 Exhausting
    ;M118 Exhausting
    ;UPDATE_DELAYED_GCODE ID=StopExhausting DURATION=60

[delayed_gcode StopExhausting]
gcode:
    SET_FAN_SPEED FAN=Exhaust SPEED=0 ;turn off exhaust
    M117 Done Exhausting
    M118 Done Exhausting

[delayed_gcode GoSleep]
gcode:
    SET_LED_TEMPLATE LED=sb_leds TEMPLATE=""
    STOP_LED_EFFECTS
    STATUS_READY

[delayed_gcode PrintingLights]
gcode:
    SET_LED_TEMPLATE LED=sb_leds TEMPLATE=""
    STOP_LED_EFFECTS
    SET_PIN PIN=caselight VALUE=0.1


[gcode_macro flash]
gcode:
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0
    G4 P500
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0
    G4 P500
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0
    G4 P500
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0
    G4 P500
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0
    G4 P500
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0
    G4 P500
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0
    G4 P500
    SET_PIN PIN=caselight VALUE=1
    SET_PIN PIN=bedlight VALUE=1
    G4 P500
    SET_PIN PIN=caselight VALUE=0
    SET_PIN PIN=bedlight VALUE=0

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83
    G1 E10 F300
    G1 E-200 F1800
    M82

[gcode_macro LOAD_FILAMENT]
gcode:
    PARK
    M83
    G1 E90 F1800
    G1 E50 F300
    G1 E15 F150
    M82
    CLEAN_NOZZLE
    G90

[gcode_macro PURGE]
gcode:
    M83
    G1 E50 F300
    G1 E15 F150
    M82
    G90

[gcode_macro CENTER]
gcode: 
    G90
    G0 X175 Y175 Z50 F6000

[gcode_macro FRONT]
gcode: 
    G90
    G0 X175 Y15 Z125 F6000

[gcode_macro PARK]
gcode: 
    G90
    G0 X300 Y355 Z5 F6000

[gcode_macro CHECKEXTRUDER]
gcode: 
    G90
    G0 X300 Y15 Z125 F6000

[gcode_macro NOZZLECHANGE]
gcode: 
    STATUS_PRINTING
    M104 S255
    G90
    G0 X175 Y15 Z170 F6000

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]
recover_velocity: 300.0

[gcode_macro M600]
gcode:
    {% set X = params.X|default(175)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=M600_state

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg


[gcode_macro _KAMP_Settings]
description: This macro contains all adjustable settings for KAMP 
# The following variables are settings for KAMP as a whole.
variable_verbose_enable: True               # Set to True to enable KAMP information output when running. This is useful for debugging.

# The following variables are for adjusting adaptive purge settings for KAMP.
variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 10                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 10                   # Distance the purge will be in front of the print area, default is 10.
variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
variable_flow_rate: 10                      # Flow rate of purge in mm3/s. Default is 12.


gcode: # Gcode section left intentionally blank. Do not disturb.
    {action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _Kamp_Settings
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}


    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}

        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        {% if verbose_enable == True %}

        {action_respond_info("Moving filament tip {}mms".format(                                                                 
            (tip_distance),                                                                                      
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

        {% if purge_y_origin > 0 %}
        
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_center),
                (purge_y_origin),
                (purge_amount),
                (flow_rate),
            )) }
    
        {% else %}
    
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_origin),
                (purge_y_center),
                (purge_amount),
                (flow_rate),
            )) }

        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State                                                    # Create gcode state

        {% if purge_y_origin > 0 %}                                                             # If there's room on Y, purge along X axis in front of print area

            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_center} Y{purge_y_origin}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 X{purge_x_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% else %}                                                                              # If there's room on X, purge along Y axis to the left of print area
            
            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_center}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% endif %}

        RESTORE_GCODE_STATE NAME=Prepurge_State                                                 # Restore gcode state
    
    {% endif %}



[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}